[{"content":"注意要點\n這種關於rip基底做偏移要注意%rip要帶入下一行指令的位置\n0x1\u0026ndash;mov 0x2ee6(%rip),%rdx 這裡%rip指向0x1 但執行mov 0x2ee6(%rip),%rdx的時候%rip要指向下一行指令所以帶入0x2,所以mov 0x2ee6(%rip)=mov 0x2ee6+0x2\n0x2\u0026ndash;mov 1,%rax\nrip already points past the lea so the address of the next instruction should be used\n","description":"","id":0,"section":"posts","tags":["assambly","gcc","linux"],"title":"assambly","uri":"/posts/reverse/assambly/"},{"content":"簡介 這裡我們要學到如何利用c語言直接呼叫system call做到printf顯示的功能\n範例 實做直接呼叫linux system code\n根據1-1表格找到的資訊\n關於此段指令為什麼填入1的理由\n\u0026ldquo;mov $1, %%rdi\\n\u0026rdquo;\n1 2 3 4  #include \u0026lt;sys/syscall.h\u0026gt;int main(void){ syscall(SYS_write, 1, \u0026#34;hello, world!\\n\u0026#34;, 14); }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  void print_asm(char *arg1,long int size){ __asm__ volatile( \u0026#34;mov $1, %%rax\\n\\t\u0026#34;//system call 編碼  \u0026#34;mov $1, %%rdi\\n\\t\u0026#34;//fd 設定1 代表把字串輸入/dev/stdout 這裡就是螢幕輸出地方  \u0026#34;mov %0,%%rsi\\n\\t\u0026#34;//輸入字串記憶體位置  \u0026#34;mov %1, %%rdx\\n\\t\u0026#34; //這裡輸入字串長度 ,可以跟記憶體位置搭配來輸出到螢幕  \u0026#34;syscall\u0026#34;//x64 要用此呼叫systemcall 不能在使用int $0x80  : :\u0026#34;m\u0026#34; (arg1),\u0026#34;m\u0026#34; (size) //詳細請參考gcc inline asm  ); } int main(void) { char *d=\u0026#34;hello, world!\\n\u0026#34;; print_asm(d,14); return 0; }   System call 傳遞約定 calling_conventions  我們要先了解System call 傳遞約定才能知道要如何傳遞我們要的參數告訴linux作業系統\n根據linux原始碼我們可以建立下面的表格\n表格1-1\n   system call number             ABI規範 1 __x64_sys_write fd buf count                       x64 syscall %rax %rdi %rsi %rdx %r10 %r8 %r9     為什麼x64 syscall不符合abi?\n   %rax System call %rdi %rsi %rdx %r10 %r8 %r9     1 __x64_sys_write fd buf count       根據calling_conventions\nC內嵌ASM __asm__與asm都可以使用\n但只有__asm__ 可以在-ansi或-std(標準c規範)下使用,原因\n__asm__ asm-qualifiers ( AssemblerTemplate : OutputOperands : InputOperands : Clobbers : GotoLabels) asm-qualifiers  volatile  volatile無法完美讓內嵌組合語言避免被編譯器更動\nDo not expect a sequence of asm statements to remain perfectly consecutive after compilation, even when you are using the volatile qualifier. If certain instructions need to remain consecutive in the output, put them in a single multi-instruction asm statement.\n   AssemblerTemplate 這裡放組合語言\n 指令換行\u0026quot;\\n\\t\u0026quot;  OutputOperands [ [asmSymbolicName] ] constraint (cvariablename) constraint prefix = or +\n這裡寫要輸出變數\nInputOperands 這裡寫要輸入變數\nClobbers  編譯器不會用到Clobbers裏面設定的暫存器\n  When the compiler selects which registers to use to represent input and output operands, it does not use any of the clobbered registers. As a result, clobbered registers are available for any use in the assembler code.\n side effect fix by Clobbers fix by constraint  這個範例會引發side effect,導致不符合預期\n因為[arg1]\u0026quot;r\u0026quot; (arg1)的r所以arg1數值會被塞到某個暫存器來使用,但接下來rax,rdi,rsi,rdx暫存器會被寫入,所以原本借放arg1數值的暫存器有可能被覆蓋導致不符合預期\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #include\u0026lt;stdio.h\u0026gt;long long int print_asm(char *arg1,long int size){ long long int rax; __asm__ volatile( \u0026#34;mov $1, %%rax\\t\\n\u0026#34;//system call 編碼  \u0026#34;mov $1, %%rdi\\t\\n\u0026#34;//fd 設定1 代表把字串輸入/dev/stdout 這裡就是螢幕輸出地方  \u0026#34;mov %[arg1],%%rsi\\t\\n\u0026#34;//輸入字串記憶體位置  \u0026#34;mov %[size], %%rdx\\t\\n\u0026#34; //這裡輸入字串長度 ,可以跟記憶體位置搭配來輸出到螢幕  \u0026#34;syscall\\t\\n\u0026#34;//x64 要用此呼叫systemcall 不能在使用int $0x80  \u0026#34;mov %%rax,%[rax]\\t\\n\u0026#34; :[rax]\u0026#34;=m\u0026#34; (rax) :[arg1]\u0026#34;r\u0026#34; (arg1),[size]\u0026#34;m\u0026#34; (size)//詳細請參考gcc inline asm  : ); return rax; } int main(void) { char *d=\u0026#34;hello, world!\\n\u0026#34;; int rax=print_asm(d,14); printf(\u0026#34;%d\u0026#34;,rax); return 0; }     告訴編譯器輸入與輸出不能用到\u0026quot;rax\u0026quot;,\u0026ldquo;rdi\u0026rdquo;,\u0026ldquo;rsi\u0026rdquo;,\u0026ldquo;rdx\u0026quot;暫存器\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #include\u0026lt;stdio.h\u0026gt;long long int print_asm(char *arg1,long int size){ long long int rax; __asm__ volatile( \u0026#34;mov $1, %%rax\\t\\n\u0026#34;//system call 編碼  \u0026#34;mov $1, %%rdi\\t\\n\u0026#34;//fd 設定1 代表把字串輸入/dev/stdout 這裡就是螢幕輸出地方  \u0026#34;mov %[arg1],%%rsi\\t\\n\u0026#34;//輸入字串記憶體位置  \u0026#34;mov %[size], %%rdx\\t\\n\u0026#34; //這裡輸入字串長度 ,可以跟記憶體位置搭配來輸出到螢幕  \u0026#34;syscall\\t\\n\u0026#34;//x64 要用此呼叫systemcall 不能在使用int $0x80  \u0026#34;mov %%rax,%[rax]\\t\\n\u0026#34; :[rax]\u0026#34;=r\u0026#34; (rax) :[arg1]\u0026#34;r\u0026#34; (arg1),[size]\u0026#34;m\u0026#34; (size)//詳細請參考gcc inline asm  :\u0026#34;rax\u0026#34;,\u0026#34;rdi\u0026#34;,\u0026#34;rsi\u0026#34;,\u0026#34;rdx\u0026#34;  ); return rax; } int main(void) { char *d=\u0026#34;hello, world!\\n\u0026#34;; int rax=print_asm(d,14); printf(\u0026#34;%d\u0026#34;,rax); return 0; }    解法二直接用記憶體位置,不利用暫存器借放\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #include\u0026lt;stdio.h\u0026gt;long long int print_asm(char *arg1,long int size){ long long int rax; __asm__ volatile( \u0026#34;mov $1, %%rax\\t\\n\u0026#34;//system call 編碼  \u0026#34;mov $1, %%rdi\\t\\n\u0026#34;//fd 設定1 代表把字串輸入/dev/stdout 這裡就是螢幕輸出地方  \u0026#34;mov %[arg1],%%rsi\\t\\n\u0026#34;//輸入字串記憶體位置  \u0026#34;mov %[size], %%rdx\\t\\n\u0026#34; //這裡輸入字串長度 ,可以跟記憶體位置搭配來輸出到螢幕  \u0026#34;syscall\\t\\n\u0026#34;//x64 要用此呼叫systemcall 不能在使用int $0x80  \u0026#34;mov %%rax,%[rax]\\t\\n\u0026#34; :[rax]\u0026#34;=r\u0026#34; (rax) :[arg1]\u0026#34;m\u0026#34; (arg1),[size]\u0026#34;m\u0026#34; (size)//詳細請參考gcc inline asm  : ); return rax; } int main(void) { char *d=\u0026#34;hello, world!\\n\u0026#34;; int rax=print_asm(d,14); printf(\u0026#34;%d\u0026#34;,rax); return 0; }      'use strict'; var containerId = JSON.parse(\"\\\"fa2484dc4f61b204\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; }  GotoLabels 參考資源 C/C++ function definitions without assembly\nHow can I find the implementations of Linux kernel system calls?\nlinux system call\nInline Assembly \u0026amp; Memory Barrier\n","description":"","id":1,"section":"posts","tags":["assambly","gcc","linux"],"title":"c inline assambly and system call","uri":"/posts/linux/gcc/"},{"content":"其實wiki x86 calling conventions寫的很完整,我只是整理一下\n簡介 當函數調用的時候必須傳遞參數,但傳遞的時候到底如何約定底層組合語言？就稱為calling conventions\nx86-64 System V AMD64 ABI ","description":"","id":2,"section":"posts","tags":["ABI"],"title":"calling conventions","uri":"/posts/linux/calling_conventions/"},{"content":"https://ctf-wiki.org/pwn/linux/mitigation/canary/\n你的程式\nhttps://hardenedlinux.github.io/2016/11/27/canary.html\nhttps://stackoverflow.com/questions/10325713/why-does-this-memory-address-fs0x28-fs0x28-have-a-random-value\n範例 題目 下面程式會觸發smashing detected請修好下面的程式\n** stack smashing detected ***: terminated 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  #include\u0026lt;stdio.h\u0026gt;int print_asm(char *arg1,long int size){ int rax; __asm__ volatile( \u0026#34;mov $1, %%rax\\t\\n\u0026#34;//system call 編碼  \u0026#34;mov $1, %%rdi\\t\\n\u0026#34;//fd 設定1 代表把字串輸入/dev/stdout 這裡就是螢幕輸出地方  \u0026#34;mov %[arg1],%%rsi\\t\\n\u0026#34;//輸入字串記憶體位置  \u0026#34;mov %[size], %%rdx\\t\\n\u0026#34; //這裡輸入字串長度 ,可以跟記憶體位置搭配來輸出到螢幕  \u0026#34;syscall\\t\\n\u0026#34;//x64 要用此呼叫systemcall 不能在使用int $0x80  \u0026#34;mov %%rax,%[rax]\\t\\n\u0026#34;//根據amd64 abi 回傳數值放在rax  :[rax]\u0026#34;=m\u0026#34;(rax) :[arg1]\u0026#34;m\u0026#34; (arg1),[size]\u0026#34;m\u0026#34; (size) //詳細請參考gcc inline asm  ); return rax; } int main(void) { char *d=\u0026#34;hello, world!\\n\u0026#34;; int rax=print_asm(d,14); printf(\u0026#34;%d\u0026#34;,rax); return 0; }   再思考一下 執行到第3行(int rax;)記憶體與cpu\n執行到第10行( \u0026quot;mov %%rax,%[rax]\\t\\n\u0026quot;)可以看到原先規劃4bytes(int rax)被塞入8ytes(紅色部份)直接重疊到canary value\n答案   答案  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  #include\u0026lt;stdio.h\u0026gt;long long int print_asm(char *arg1,long int size){ long long int rax;  __asm__ volatile( \u0026#34;mov $1, %%rax\\t\\n\u0026#34;//system call 編碼  \u0026#34;mov $1, %%rdi\\t\\n\u0026#34;//fd 設定1 代表把字串輸入/dev/stdout 這裡就是螢幕輸出地方  \u0026#34;mov %[arg1],%%rsi\\t\\n\u0026#34;//輸入字串記憶體位置  \u0026#34;mov %[size], %%rdx\\t\\n\u0026#34; //這裡輸入字串長度 ,可以跟記憶體位置搭配來輸出到螢幕  \u0026#34;syscall\\t\\n\u0026#34;//x64 要用此呼叫systemcall 不能在使用int $0x80  \u0026#34;mov %%rax,%[rax]\\t\\n\u0026#34;//根據amd64 abi 回傳數值放在rax所以接收的大小要符合8byte不然可能溢位  :[rax]\u0026#34;=m\u0026#34;(rax) :[arg1]\u0026#34;m\u0026#34; (arg1),[size]\u0026#34;m\u0026#34; (size) //詳細請參考gcc inline asm  ); return rax; } int main(void) { char *d=\u0026#34;hello, world!\\n\u0026#34;; int rax=print_asm(d,14); printf(\u0026#34;%d\u0026#34;,rax); return 0; }      ","description":"","id":3,"section":"posts","tags":["assambly","gcc","linux","安全","pwn"],"title":"canary analysis","uri":"/posts/linux/canary/"},{"content":"接下來以linux v5.10 64bit elf作範例  簡介 Executable and Linking Format (ELF)這個格式包含了執行與連結用的檔案,可以搭配文件elf.pdf與原始碼elf.h一起看\nELF header 小範例\n1  readelf -h 你的檔名   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  typedef struct elf64_hdr { unsigned char e_ident[16];\t/* ELF \u0026#34;magic number\u0026#34; */ Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry;\t/* Entry point virtual address */ Elf64_Off e_phoff;\t/* Program header table file offset */ Elf64_Off e_shoff;\t/* Section header table file offset */ Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; } Elf64_Ehdr;   e_type 這邊描述elf檔案是什麼型態\n   e_type 數值(unsigned short) 用途     ET_NONE 0 No file type 未知格式(我在linux核心找不到有啥特別用途)   ET_REL 1 Relocatable file 靜態連結.o .ko   ET_EXEC 2 Executable file 可以執行的檔案   ET_DYN 3 Shared object file 動態連結檔案.so,或是position-independent executable   ET_CORE 4 Core file 當發生core dumped如果有設定linux會輸出這個type的elf檔案讓你追蹤為什麼程式崩潰了   ET_LOPROC 0xff00 Processor-specific ET_LOPROC~ET_HIPROC範圍的數值   ET_HIPROC 0xffff Processor-specific 同上    var/lib/systemd/coredump\ncoredumpctl\n這種執行檔position independent executable aslr是ET_DYN型態要注意,並且entry point 不準確\nPosition-independent code\nET_DYN\n Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n 進階探討 https://web.archive.org/web/20210415124218/http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html\n參考 [操作系统真象还原-5.3.3 elf 格式的二进制文件]\nThe Curious Case of Position Independent Executables\n[Learning Linux Binary Analysis]\n APP漏洞扫描器之未使用地址空间随机化 \u0026#x21a9;\u0026#xfe0e;\n   ","description":"","id":4,"section":"posts","tags":["binary","系統程式","安全"],"title":"elf","uri":"/posts/linux/elf/"},{"content":"介紹 ftrace是Steven Rostedt開發trace-cmd也是他開發的,接下來用trace-cmd示範\n細節文件請看ftrace.txt\n查詢KERNEL CONFIG 法一 用cat讀出/proc/config.gz並且Pipeline(|)傳遞給gunzip解壓縮輸出(\u0026gt;)名為kernel.config的檔案\n1  cat /proc/config.gz | gunzip \u0026gt; kernel.config   CONFIG_XXX替換你要查詢的字\n1  cat kernel.config | grep \u0026#34;CONFIG_XXX\u0026#34;   法二 zcat /proc/config.gz | grep \u0026quot;CONFIG_XXX\u0026quot; trace-cmd ftrace並不是每個函數都有追蹤,可以查詢哪些核心函數支援追蹤 1 2 3 4 5 6 7 8 9  #察看支援追蹤哪些函數 sudo trace-cmd list -f #察看支援追蹤哪些機制 sudo trace-cmd list -e #察看支援追蹤哪些機制 sudo trace-cmd list -o #察看有哪些支援的tracer可以plugin sudo trace-cmd list -t #hwlat blk mmiotrace function_graph wakeup_dl wakeup_rt wakeup function nop   record 不同tracer會追蹤與顯示的方式不同,我喜歡function有興趣可以試試其他tracer,執行完會生成trace.dat檔案\n1 2  #這裡plugin(-p)的tracer叫function sudo trace-cmd record -p function ./你的程式   report report會讀你目錄底下的trace.dat\n1  sudo trace-cmd report | grep \u0026#34;你有興趣核心函數名稱\u0026#34;   這裡的TIMESTAMP是microseconds\n1 2 3 4 5 6 7 8 9 10  # tracer: function # # entries-in-buffer/entries-written: 144405/9452052 #P:4 # # TASK-PID CPU# TIMESTAMP FUNCTION # | | | | | \u0026lt;idle\u0026gt;-0 [002] 23636.756054: ttwu_do_activate.constprop.89 \u0026lt;-try_to_wake_up \u0026lt;idle\u0026gt;-0 [002] 23636.756054: activate_task \u0026lt;-ttwu_do_activate.constprop.89 \u0026lt;idle\u0026gt;-0 [002] 23636.756055: enqueue_task \u0026lt;-activate_task   ","description":"","id":5,"section":"posts","tags":["逆向工程","核心追蹤","linux","安全"],"title":"ftrace","uri":"/posts/reverse/ftrace/"},{"content":"介紹 GDB(GNU Debugger)Richard Stallman成立Free Software Foundation\ndebug format 目前linux elf的debug format是DWARF所以我們先只探討DWARF,\n當編譯的時候加-g代表就是塞入debug資訊到執行檔\n1  gcc main.c -g   接下來實驗搭配gdb-dashboard套件比較美觀請先安裝\n1  wget -P ~ https://git.io/.gdbinit   GDB指令 啟動GDB  gdb --args executablename arg1 arg2 arg3 打開並且跟蹤程式,如果有參數可以塞入 sudo gdb --pid 123 跟蹤已經執行的程式利用pid,因為跟蹤其他程式所以需要root權限  進入GDB後 最原始版本gdb可以使用的指令\n進入gdb後\n start 開始並且中斷在main函數,沒有symbol table無法使用 starti 在沒有symbol table之下,我們只能從頭看組合語言,所以我們需要starti從第一行組合語言開始並且中斷 n 執行下一行原始碼,遇到function call不會中斷,等到function call執行完成才中斷 ni 執行下一行組合語言,遇到function call不會中斷,等到function call執行完成才中斷 s 執行下一行原始碼,遇到function call會進入並且中斷 si 執行下一行組合語言,遇到function call會進入並且中斷 b main 設定中斷在main函數(main名稱是紀錄在symbol tablereadelf -s 執行檔名),如果gcc設定-s代表刪除程式所有symbol table,你就無法找到main的位置 b *0x123 設定中斷在0x123記憶體位置 j *0x123 跳到0x123記憶體位置並且會馬上繼續執行 c 持續執行等到下一個中斷b出現 info b 列出已經設定哪些中斷 d 1 刪除Num 1的中斷 r 開始執行/重新執行,會一直跑下去直到程式中斷或是結束跑完 catch  syscall  write catch syscall write可以暫停當你呼叫write syscall之後     q離開gdb handle SIGTSTP nostop nopass print 這裡SIGTSTP可以改成你要設定的訊號(Control+C發送SIGINT,Control+Z發送SIGTSTP),或是all全部signal一起設定  stop/nostop 設定收到SIGTSTP訊號gdb要停止嗎？ pass/nopass 設定收到SIGTSTP訊號gdb要轉傳給被追蹤的程式嗎？ print/noprint 設定收到SIGTSTP訊號gdb要顯示嗎？   info signals 顯示目前signals的設定 set disable-randomization off 這個指令可以gdb隨機載入執行檔到不同記憶體位置  作業系統因為有ASLR的安全機制會把ELF File Types Dynamic(ET_DYN)型態的執行檔(又稱PIC1或PIE2)載入到隨機的虛擬記憶體位置,但gdb會為了好追蹤偷偷關閉ASLR載入到固定的記憶體位置   python 在gdb裡面啟動python,用end來關閉,目的是可以拿來擴展gdb功能    原始碼進入點都是main? 點我下載範例檔案go-elf\n在debug此檔案go-elf到底要中斷在哪裡才能進入主程式.\n這個範例希望讓大家體會這個main名稱只是約定好的,不同程式語言它可能自己定義\n提示\nreadelf -s go-elf   答案  main.main 才是go語言編譯出來的 main進入點\nb main.main    有趣的程式 點我下載x86_64-abi\n 希望學到簡單c inline assambly 希望了解某些暫存器在system v abi的規範下有特殊用途 不用main 不用printf libary 輸出hello, world!  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  void print_asm(char *arg1,long int size){ __asm__ volatile( \u0026#34;mov $1, %%rax\\n\\t\u0026#34; //system call 編碼  \u0026#34;mov $1, %%rdi\\n\\t\u0026#34; //arg1:fd 設定1 代表把字串輸入/dev/stdout 這裡就是螢幕輸出地方  \u0026#34;mov %0,%%rsi\\n\\t\u0026#34; //arg2:輸入字串記憶體位置  \u0026#34;mov %1, %%rdx\\n\\t\u0026#34; //arg3:這裡輸入字串長度 ,可以跟記憶體位置搭配來輸出到螢幕  \u0026#34;syscall\u0026#34;//x64 要用此呼叫systemcall 不能在使用int $0x80  : //需要輸出的參數,沒有用到  :\u0026#34;m\u0026#34; (arg1),\u0026#34;m\u0026#34; (size) //需要輸入的參數,並且紀錄在記憶體就好  ); } void _start() { char *d=\u0026#34;hello, world!\\n\u0026#34;; print_asm(d,14); asm(\u0026#34;movl $1,%eax;\u0026#34; \u0026#34;xorl %ebx,%ebx;\u0026#34; \u0026#34;int $0x80\u0026#34; ); }   gcc -nostdlib main.c handle signal範例  了解到被追蹤的程式的signal,會被追蹤者掌控 對程式按CTRL+Z默認的行為是發送(SIGTSTP)  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;sys/types.h\u0026gt;#include\u0026lt;signal.h\u0026gt; void handle_signal(int sig) { printf(\u0026#34;我收到SIGNAL拉！！ %d\\n\u0026#34;, sig); } int main() { printf(\u0026#34;pid/tid: %ld\\tppid: %ld\\n\u0026#34;, (long)getpid(), (long)getppid()); signal(SIGTSTP,handle_signal); while (1){} return 0; }   準備環境 1.編譯\n1  gcc signal.c -o signal   2.在signal的終端機 執行 signal\n1  ./signal   出現pid/tid: 123\tppid: 321\n123就是signal程式的pid等等會用到(這裡的數字不會跟我一樣)\n3.開啟另一個終端機讓gdb去追蹤signal程式\n1  sudo gdb --pid 123   實驗 gdb處理(handle)signal.c收到CTRL+Z(SIGTSTP)訊號的時候GDB不停止(nostop)不轉傳給signal.c(nopass)但是要在GDB介面輸出訊息(print)  1.在gdb的終端機輸入\n1  handle SIGTSTP nostop nopass print   2.在gdb的終端機輸入c讓signal.c繼續執行\n1  c   3.在signal的終端機按下CTRL+Z觀察\n如果上面nopass改成pass會有什麼差別？\n做給你看拉  gdb-dashboard dashboard後按tab兩下可以看到有哪些指令可以用\n\u0026ldquo;查詢0x123後10bytes的記憶體\u0026rdquo;\ndashboard memory watch 0x123 10 Debug Python by GDB 剛才的指令我們已經學會如何動態分析編譯語言(Compiled language)接下來會教學如何分析直譯語言(Interpreted language)我們以python為範例\npython有各種直譯器的實作pypy(python-JIT),Jython(java),cpython(C),IronPython(c#)\n一般人用的python是cpython也就是吉多·范羅蘇姆(Guido van Rossum)python之父所開發的\n接下來的範例只探討利用gdb注入cpython\n利用查閱(Python/C API Reference Manual)學會如何控制python直譯器(python直譯器教學),進而利用gdb注入python程式到執行中的python程序裏面\n範例 引用來源Extending GDB with Python - Lisa Roach\n此實驗的架構圖\n準備環境 創建main.py並且放入此程式\n1 2 3 4 5 6  import time import os print(\u0026#34;pid:\u0026#34;+str(os.getpid())) 我的密碼=\u0026#34;ggininder\u0026#34; while True: time.sleep(1234)   實驗 1.啟動main.py會看到pid的數值這裡舉例pid:123(你的pid會跟我不一樣)\npython main.py 2.開啟另一個終端機輸入下面指令去追蹤pid:123程序\n1  sudo gdb --pid 123   告訴python直譯器的GIL要給我用資源\n1  call (int)PyGILState_Ensure()   告訴python直譯器我想執行的程式\n1  call (int)PyRun_SimpleString(\u0026#34;print(globals())\u0026#34;)   告訴python直譯器的GIL還你資源拉\n1  call (void)PyGILState_Release(1)   觀察看看發生什麼事??\n Extending GDB with Python 介紹 gdb支持Python與Guile兩種程式來強化gdb,我想很少人會Guile吧??\n可以看到有許多gdb的擴展套件他們都是用python寫的\n-pwndbg\n-peda\n-gef\n下圖可以看到目前大部份強化GDB的工具都是利用python開發所以我們只教python擴展gdb\n如何載入擴展  GDB啟動的時候會載入~/.gdbinit gdb -x 我的套件.py 進入gdb打python  GDB原理 接下來以x64 linux v5.10作範例  ptrace c語言內嵌入組合語言呼叫systemcall-\u0026gt;呼叫syscall到核心的過程-\u0026gt;syscall執行的過程-\u0026gt;最後回去你的主程式  gdb底層是利用ptrace完成(strace也是利用ptrade完成3 )接下來簡單聊一下ptrace systemcall\nlinux kernel裡面稱被追蹤的程式叫作tracee,追蹤人的程式叫tracer\n點選ptrace syscall可以看到ptrace實作的地方,有個叫SYSCALL_DEFINE4的macro\nSYSCALL_DEFINE4-\u0026gt;經過編譯器前置處理-\u0026gt;__x64_sys_ptrace 在x64 linux v5.10的ptrace的名稱\n__x64_sys_ptrace(long request, long pid, unsigned long addr, unsigned long data) PTRACE_ATTACH 跟作業系統報備哪個程式要被追蹤\nptrace(PTRACE_ATTACH, pid, NULL, NULL) 細節請看ptrace.c\n 確保 tracee 不是kernel thread  不讓你追蹤核心與暫停核心程式,如果真要這樣搞,要用User-mode Linux (UML)參考jserv教學   確保 tracee 與tracer不是相同thread group  因為linux同thread group會共用Signal handlers所以tracer無法處理Signal行為   確保 tracer對tracee有權限  linux security module   確保tracee沒有死掉或是變僵屍(EXIT_ZOMBIE/EXIT_DEAD)  都死了還要追蹤？   確保tracee沒有被其他程式追蹤 紀錄tracee已經被追蹤 更改tracer為tracee繼父 發送SIGSTOP給tracee 這裡不保證tracee已經暫停-PTRACE_ATTACH   linux圈子滿亂有real_parent(生父)與parent(繼父)\n一開始程式繼父與生父是同一人,但PTRACE_ATTACH完後tracer會變為tracee的繼父,並且當小孩(tracee)死掉當然是繼父(tracer)被通知(SIGCHLD)負責收屍(wait),但是如果小孩死掉繼父沒有收屍,小孩就變成僵屍-sched.h 僵屍範例 複製下面dummy-loop-prog.c的程式執行\nPTRACE_ATTACH完成後需使用waitpid()確保被ptrace追蹤的程式已經停止了\n以上滿足才能開始ptrace動作,讀取暫存器,讀寫記憶體,跳到某行\u0026hellip;\n正常駭客要解決\n W^X policy  目前作業系統都有W^X policy所以一塊記憶體只能是寫或是執行不能同時擁有   ASLR(Address space layout randomization)  gdb會關閉ASLR讓你以為位置固定,但正常程式會啟用並且保護 隨機記憶體位置,駭客就不知道要跳到哪執行某些函數    cat /proc/[pid]/maps\nbreakpoint ??\n範例程式 預備知識assambly與systemcall\n範例PTRACE_ATTACH的過程\nsequenceDiagram autonumber loop 迴圈 dummy-loop-prog.c-\u0026gt;\u0026gt;dummy-loop-prog.c: TASK_RUNNING(R) end injector.c-\u0026gt;\u0026gt;作業系統: PTRACE_ATTACH dummy-loop-prog.c 作業系統-\u0026gt;\u0026gt;dummy-loop-prog.c: SIGSTOP Note left of 作業系統: dummy-loop-prog.c變為TASK_TRACED狀態 Note right of injector.c: waitpid() loop 迴圈 dummy-loop-prog.c-\u0026gt;\u0026gt;dummy-loop-prog.c: TASK_TRACED(t) end injector.c   我來注入你惹 嘿嘿!  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;sys/ptrace.h\u0026gt; /* ptrace() */#include \u0026lt;sys/wait.h\u0026gt; /* wait() */ #include \u0026lt;sys/user.h\u0026gt; /* struct user_regs_struct */ static char shellcode[] = \u0026#34;\\x48\\xc7\\xc0\\x3c\\x00\\x00\\x00\u0026#34; //mov $0x3c,%rax  \u0026#34;\\x48\\xc7\\xc7\\x4e\\x00\\x00\\x00\u0026#34; //mov $78,%rdi  \u0026#34;\\x0f\\x05\u0026#34;;//syscall // ...-\u0026gt;__VA_ARGS__ (VA=variadic) #define OUT_MSG(x, ...) printf(\u0026#34;* \u0026#34; x \u0026#34;\\n\u0026#34;,## __VA_ARGS__) #define ERR_MSG(x) printf(\u0026#34;\\t[Error] \u0026#34; x \u0026#34;\\n\u0026#34;)  int main(int argc, char *argv[]) { int pid, offset; struct user_regs_struct regs; /*確認有沒有輸入pid*/ OUT_MSG(\u0026#34;Injector starts.\u0026#34;); if (argc \u0026lt; 2) { ERR_MSG(\u0026#34;PID required in parameter.\u0026#34;); return -1; } //把輸入的pid字串轉成int  pid = atoi(argv[1]); OUT_MSG(\u0026#34;Attaching process (PID=%d)...\u0026#34;, pid); //開始PTRACE_ATTACH  if (ptrace(PTRACE_ATTACH, pid, NULL, NULL) \u0026lt; 0) { ERR_MSG(\u0026#34;Fail to ptrace process\u0026#34;); ptrace(PTRACE_DETACH, pid, NULL, NULL); return -1; } OUT_MSG(\u0026#34;Process attached.\u0026#34;); //確保tracee已經停止  if (waitpid(pid, NULL, WUNTRACED) \u0026lt; 0) { ERR_MSG(\u0026#34;WUNTRACED\u0026#34;); exit(1); } /*拿到tracee的暫存器*/ OUT_MSG(\u0026#34;Getting registers from process.\u0026#34;); if (ptrace(PTRACE_GETREGS, pid, NULL, \u0026amp;regs) \u0026lt; 0) { ERR_MSG(\u0026#34;Fail to get registers.\u0026#34;); ptrace(PTRACE_DETACH, pid, NULL, NULL); exit(1); } /*開始再rip與之後寫入shellcode*/ OUT_MSG(\u0026#34;Injecting shellcode into process...\u0026#34;); for (offset = 0; offset \u0026lt; sizeof(shellcode); offset++) { if (ptrace(PTRACE_POKETEXT, pid, regs.rip + offset, *(int *) \u0026amp;shellcode[offset])) { ERR_MSG(\u0026#34;Fail to inject.\u0026#34;); ptrace(PTRACE_DETACH, pid, NULL, NULL); exit(1); } } /**/ OUT_MSG(\u0026#34;Detach process (PID=%d).\u0026#34;, pid); ptrace(PTRACE_DETACH, pid, NULL, NULL); OUT_MSG(\u0026#34;Done\u0026#34;); return 0; }      dummy-loop-prog.c v1 PTRACE_TRACEME  這個版本是作最簡單while迴圈程式\n1 2 3 4 5 6 7 8 9  #include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;sys/types.h\u0026gt;int main() { printf(\u0026#34;pid/tid: %ld\\tppid: %ld\\n\u0026#34;, (long)getpid(), (long)getppid()); while (1){} return 0; }     這個版本利用PTRACE_TRACEME讓tracee直接被生父追蹤,所以其他程序無法再追蹤他了,來避免被其他程式動態分析\n1 2 3 4 5 6 7 8 9 10  #include \u0026lt;unistd.h\u0026gt;//getpid,getppid#include \u0026lt;stdio.h\u0026gt;//printf#include \u0026lt;sys/ptrace.h\u0026gt;//ptrace,PTRACE_TRACEMEint main() { printf(\u0026#34;pid/tid: %ld\\tppid: %ld\\n\u0026#34;, (long)getpid(), (long)getppid()); ptrace(PTRACE_TRACEME); while (1){} return 0; }       'use strict'; var containerId = JSON.parse(\"\\\"3601b05323bfe3e5\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; }  編譯 1  gcc -o injector injector.c -g   1  gcc -o dummy-loop-prog dummy-loop-prog.c -g   實驗  開啟終端機啟動要被注入的程式  1 2  ./dummy-loop-prog pid/tid: 123\tppid: 321    開啟新的終端機,這個範例dummy-loop-prog 的pid為123\nsudo給injector權限注入pid為123的程式  1  sudo ./injector 123    在dummy-loop-prog終端機下  1 2  echo $? 78   這個78是injector注入的\n問題？  希望把78改成其他數字  利用ftrace了解ptrace 先學學ftrace基礎\n我們可以利用剛才的程式配合ftrace我們可以感受程式流進去核心後做了什麼事\nDWARF 這裡聊ELF的debug section與GDB如何讀取ELF的DWARF資訊並debug\ndebug section壓縮 編譯main.c輸出debug資訊(-g)在link階段(-Wl)放入(--compress-debug-sections=zlib-gnu)參數讓debug壓縮\ngcc -Wl,--compress-debug-sections=zlib-gnu -g main.c\n詳細參考ld\n --compress-debug-sections=  zlib  與zlib-gabi一樣   zlib-gnu  壓縮DWARF並且更改debug section名稱.debug_xxx-\u0026gt;.zdebug_xxx   zlib-gabi  壓縮DWARF並且不會更改debug section名稱      引用  trace基本Linux系統呼叫\njserv-以 ptrace 系統呼叫來追蹤/修改行程\njserv-ptrace / SIGTRAP / int3 的關聯\nInfecting Running Processes\nMAKE STACK EXECUTABLE AGAIN\nptrace() Tutorial\nCommand set-permission(mprotect)\nstrace 是如何工作的\nHow does strace work\nLinux task_struct parent 和 real_parent 的区别\nHow debuggers work: Part 2 - Breakpoints\n  position-independent code \u0026#x21a9;\u0026#xfe0e;\n position-independent executable \u0026#x21a9;\u0026#xfe0e;\n Intercepting and Emulating Linux System Calls with Ptrace \u0026#x21a9;\u0026#xfe0e;\n   ","description":"","id":6,"section":"posts","tags":["逆向工程","安全"],"title":"gdb","uri":"/posts/reverse/gdb/"},{"content":"介紹 godbolt 就是給你看,各個語言,編譯器,不同參數 出來的機械碼,組合語言,執行\n範例 可以看到xor %eax,%eax 的機械碼拉與c語言的組合語言\nOutput:compile to binary,x86-64 gcc 10.2\n1 2 3 4 5 6  int main(){ asm volatile( \u0026#34;xor %%eax,%%eax\\n\u0026#34; ); return 0; }   ","description":"","id":7,"section":"posts","tags":["逆向工程"],"title":"godbolt","uri":"/posts/reverse/godbolt/"},{"content":"LSM_HOOK_INIT與call_int_hook是linux kernel 的macro負責處理\n舉例ptrace安全處理\nsecurity_ptrace_access_check\ncall_int_hook\nLSM_HOOK_INIT(ptrace_access_check, cap_ptrace_access_check)\nftrace ptrace attach resault\n1 2 3  cap_ptrace_access_check \u0026lt;-- security_ptrace_access_check yama_ptrace_access_check \u0026lt;-- security_ptrace_access_check apparmor_ptrace_access_check \u0026lt;-- security_ptrace_access_check   ","description":"","id":8,"section":"posts","tags":["安全","linux"],"title":"linux security module","uri":"/posts/linux/lcm/"},{"content":"介紹 請google,細節請直接看--help\n想看組合語言與機械碼？ objdump -d a.out\n","description":"ss","id":9,"section":"posts","tags":["逆向工程"],"title":"objdump","uri":"/posts/reverse/objdump/"},{"content":"http://shell-storm.org/shellcode/\n","description":"","id":10,"section":"posts","tags":["逆向工程"],"title":"shellcode","uri":"/posts/reverse/shellcode/"},{"content":"這個寫的很猛\nhttps://web.archive.org/web/20201107223830/http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\n","description":"","id":11,"section":"posts","tags":["linux","系統程式"],"title":"執行檔案過程","uri":"/posts/linux/exec/"},{"content":"工具  靜態分析程式  Binwalk Ghidra   動態分析程序  gdb   Z3 Theorem Prover  超猛拉   分析linux核心  User-Mode Linux bpftrace ftrace相關工具    基礎知識  microcode  比機械碼還底層  Meltdown Spectre     機械碼編碼方法  intel手冊 shellcode   組合語言  定址模式 abi   動態語言 檔案格式  執行檔  ELF PE     c  CERT Coding Standards   卡內基梅隆大學教你做人   godbolt  線上看組合語言工具      ","description":"","id":12,"section":"posts","tags":["逆向工程"],"title":"逆向工程","uri":"/posts/reverse/rv/"},{"content":"所以是什麼？ 我們比較abi與api\n api  你寫程式呼叫函式庫(#include\u0026lt;stdio.h\u0026gt;)與api(printf)   abi  編譯完成後,約定底層的行為    誰需要知道abi 開發編譯器,組合語言,作業系統的人\nhttps://stackoverflow.com/questions/2171177/what-is-an-application-binary-interface-abi\nABI範例   RISC-V ELF psABI specification\n 定義riscv每個暫存器負責什麼    Procedure Call Standard for the Arm Architecture\n 定義arm每個暫存器負責什麼    System V AMD64 ABI\n 規定Solaris，GNU/Linux，FreeBSD和其他非微軟OS如何傳遞 stack如何規劃與維護 定義x86每個暫存器負責什麼    Itanium C++ ABI\n 確保編譯出來的檔案可以互相操作,舉例object file可以link在一起,或是可以呼叫動/靜連結庫 GCC and Clang都是依照此abi所規範,所以可以相容object file    https://abi-laboratory.pro\n  python abi 範例  https://eklitzke.org/an-unexpected-python-abi-change  abi bug   https://www.python.org/dev/peps/pep-0425/#abi-tag  打包版本   https://www.python.org/dev/peps/pep-0427/  The Wheel Binary Package Format    c  https://imzlp.me/posts/5392/  c與c++    ","description":"","id":13,"section":"posts","tags":["ABI"],"title":"什麼是ABI？","uri":"/posts/abi/"},{"content":"如果無法顯示emoji 請安裝\nARCH Ubuntu  sudo pacman -S noto-fonts-emoji   sudo apt-get install noto-fonts-emoji     'use strict'; var containerId = JSON.parse(\"\\\"a85f19a55271d857\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; }  ","description":"Guide to emoji usage in Hugo","id":14,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Emoji Support","uri":"/posts/emoji-support/"},{"content":"研究所:sdn openflow 動態路由 強化學習 p4\nside project:副業作金融科技,高頻交易\n","description":"我誰？","id":15,"section":"","tags":null,"title":"About","uri":"/about/"},{"content":"introduction  作者說物理和氣候研究人員與全球合作者交換petabytes的數據\n他們發現使用Gb等級的網路設施在不同洲之間只能提供幾Mb的速度\n這些問題始於1980年代創建TCP擁塞控制時所做的設計\n  1988年Van Jacobson的壅塞控制的文章說到 封包遺失代表網路開始壅塞了\n由於當時技術的限制,所以這這個想法是對的因為當時buffer很小很快塞滿並且開始loss\n 問題-bufferbloat 基於loss的壅塞控制演算法的問題\n  當發生瓶頸的交換機buffer很大時,會一直塞交換機的buffer直到滿出來才介入控制\n  當發生瓶頸交換機buffer較小時，buffer很容易滿出來,交換機就會開始丟棄封包,演算法頻繁減半Contention Window,從而導致吞吐量大量降低\n  所以需要找到演算法替代基於loss的擁塞控制。\n作者解法 BDP (bandwidth-delay product)  RTprop 光速延遲的時間 BtlBW 可用的頻寬  bdp就是在算,當塞滿鏈路的時候有多少bytes\n何時開始要控制流量？  — Leonard Kleinrock 1告訴我們要在BDP那邊控制會讓個別與整體網路最佳化,\n Jeffrey M. Jaffe證明無法求到準確的數值,但是google說我們可以用預測的方式逼近BDP  app limited: 只有再這個區域才能探測到真實的RTprop但BtlBW未知,所以可以看到Round trip time固定\nbandwidth limites: 只有再這個區域才能探測到真實的BtlBW但RTprop未知,此區域已經塞滿頻寬所以可以看到Delibery rate固定\nx軸是總共發出去但還沒收到ack的封包\ny軸有兩個部份\n Round trip time:一個封包來回時間 Delibery rate:每秒到達的封包\n下圖的線\n 黃色那條線後代表鏈路已經塞滿開始塞交換機的buffer 藍色那條被光速限制 綠色那條被最大頻寬所限制 紅色那條虛線被交換機buffer所限制 中間灰色的部份被藍綠紅線所限制 橘色那條線代表鏈路與buffer被佔滿後開始會loss,而基於loss的壅塞控制到現在才開始介入,但此時網路已經有很高的延遲與loss,並且目前記憶體愈來愈便宜,過大的buffer導致bufferbloat可以看到rtt綠色那條線一直升高.    原始碼v1 v1問題  重傳發生過高   The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n   ","description":"","id":16,"section":"publication","tags":["壅塞控制"],"title":"BBR","uri":"/publication/article/bbr/"},{"content":"Markdownify box This is boxmd shortcode Simple box This is **box** shortcode  Code tabs Make it easy to switch between different code\njava javascript  1  System.out.println(\u0026#39;Hello World!\u0026#39;);     1  console.log(\u0026#39;Hello World!\u0026#39;);       'use strict'; var containerId = JSON.parse(\"\\\"d96f892eb0443615\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  Tabs for general purpose Windows MacOS Ubuntu  Windows section 1  console.log(\u0026#39;Hello World!\u0026#39;);   ⚠️Becareful that the content in the tab should be different from each other. The tab makes unique id hashes depending on the tab contents. So, If you just copy-paste the tabs with multiple times, since it has the same contents, the tab will not work.\n MacOS section Hello world!  Ubuntu section Great!    'use strict'; var containerId = JSON.parse(\"\\\"0fa06ef53ae6dc58\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; }  Expand   Expand me  Title contents     Expand me2  Title2 contents2   Alert Colored box\nthis is a text this is a text this is a text this is a text Notice success text  info text  warning text  error text  ","description":"tabs, code-tabs, expand, alert, warning, notice, img, box","id":17,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Shortcodes","uri":"/posts/shortcodes/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn: Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":18,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"A brief description of Hugo Shortcodes","id":19,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Rich Content","uri":"/posts/rich-content/"},{"content":"Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nMore about tuning syntax highlighting is the Hugo documentation.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line Makefile CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt;  int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;  CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   ","description":"Syntax highlighting test","id":20,"section":"posts","tags":["hugo","怕忘記怎寫hugo markdown"],"title":"Syntax highlighting","uri":"/posts/syntax-highlight/"},{"content":"We need goldmark katex entension which is not yet we have: [https://github.com/gohugoio/hugo/issues/6544](https://github.com/gohugoio/hugo/issues/6544)  Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$\n\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\n$$\n","description":"A brief guide to setup KaTeX","id":21,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Math Typesetting","uri":"/posts/math-typesetting/"},{"content":"digraph G { subgraph cluster_0 { style=filled; color=lightgrey; node [style=filled,color=white]; a0 -\u0026gt; a1 -\u0026gt; a2 -\u0026gt; a3; label = \u0026quot;process #1\u0026quot;; } subgraph cluster_1 { node [style=filled]; b0 -\u0026gt; b1 -\u0026gt; b2 -\u0026gt; b3; label = \u0026quot;process #2\u0026quot;; color=blue } start -\u0026gt; a0; start -\u0026gt; b0; a1 -\u0026gt; b3; b2 -\u0026gt; a3; a3 -\u0026gt; a0; a3 -\u0026gt; end; b3 -\u0026gt; end; start [shape=Mdiamond]; end [shape=Msquare]; } ","description":"A hack to put Graphviz on the web.","id":22,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Viz support","uri":"/posts/test-viz/"},{"content":"z3? smt? 應用 ","description":"A hack to put Graphviz on the web.","id":23,"section":"posts","tags":["逆向工程"],"title":"z3","uri":"/posts/reverse/z3/"},{"content":"{ \u0026quot;signal\u0026quot;: [ {\u0026quot;name\u0026quot;: \u0026quot;CLK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;p.....|...\u0026quot;}, {\u0026quot;name\u0026quot;:\u0026quot;DAT\u0026quot;, \u0026quot;wave\u0026quot;:\u0026quot;x.345x|=.x\u0026quot;, \u0026quot;data\u0026quot;:[\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;,\u0026quot;D\u0026quot;]}, {\u0026quot;name\u0026quot;: \u0026quot;REQ\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;0.1..0|1.0\u0026quot;}, {}, {\u0026quot;name\u0026quot;: \u0026quot;ACK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;1.....|01.\u0026quot;} ]} ","description":"WaveDrom is a Free and Open Source online digital timing diagram (waveform) rendering engine that uses javascript, HTML5 and SVG to convert a WaveJSON input text description into SVG vector graphics.","id":24,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Wavedrom support","uri":"/posts/test-wavedrom/"},{"content":"{ \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [{ \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 3, 8] }] } } { \u0026quot;type\u0026quot;: \u0026quot;line\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [ { \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 2, 3], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;orange\u0026quot; }, { \u0026quot;label\u0026quot;: \u0026quot;Some other set\u0026quot;, \u0026quot;data\u0026quot;: [15, 8, 13, 5, 5, 9], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;#44ccff\u0026quot; } ] } } ","description":"Simple yet flexible JavaScript charting for designers \u0026 developers","id":25,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Chart support","uri":"/posts/test-chartjs/"},{"content":"Alice-\u0026gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--\u0026gt;Alice: I am good thanks! Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow ","description":"Generates UML sequence diagrams from simple text","id":26,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"JS Sequence Diagram support","uri":"/posts/test-js-sequence-diagrams/"},{"content":"graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] pie \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85 \u0026quot;Rats\u0026quot; : 15 ","description":"Generate diagrams, charts, graphs or flows from markdown-like text via javascript.","id":27,"section":"posts","tags":["diagram","怕忘記怎寫hugo markdown"],"title":"Mermaid support","uri":"/posts/test-mermaid/"},{"content":"When $a \\ne 0$, there are two solutions to $(ax^2 + bx + c = 0)$ and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\n","description":"A JavaScript display engine for mathematics that works in all browsers.No more setup for readers. It just works.","id":28,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"MathJax support","uri":"/posts/test-mathjax/"},{"content":"The following\n$$ \\int_{a}^{b} x^2 dx $$\nIs an integral\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEnable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.\nSee the online reference of supported TeX functions.\nNote: For inline math to render correctly, your content file extension must be .mmark. See the official mmark site.\nInline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $ Inline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","description":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.","id":29,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Katex support","uri":"/posts/test-katex/"},{"content":"st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End|future:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|future st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e ","description":"flowchart.js is a flowchart DSL and SVG render that runs in the browser and terminal. Nodes and connections are defined in separately so that nodes can be reused and connections can be quickly changed.","id":30,"section":"posts","tags":["怕忘記怎寫hugo markdown"],"title":"Flowchart support","uri":"/posts/test-flowchart/"},{"content":"Sample images from Pixabay\n","description":"cartoon gallery","id":31,"section":"gallery","tags":null,"title":"Cartoon","uri":"/gallery/cartoon/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":32,"section":"gallery","tags":null,"title":"Photo","uri":"/gallery/photo/"},{"content":"linux v5.10 x64作為範例  為什麼syscal\nA.2 AMD64 Linux Kernel Conventions\nsyscall_init(void)\nwrmsrl(MSR_LSTAR, (unsigned long)entry_SYSCALL_64);\nentry_SYSCALL_64\ndo_syscall_64\nsys_call_tablenr\nInvalid system call number:38\n為什麼syscall不符合abi? syscall macro 接下來實驗SYSCALL_DEFINEx擴展macro後的名稱\n1  wget -O- https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/arch/x86/include/asm/syscall_wrapper.h?h=v5.10 | sed \u0026#34;s/#include/\\\\\\\\\\\\\\\\#include/g\u0026#34; \u0026gt;\u0026gt; syscall_wrapper.h   1  wget -O- https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/include/linux/syscalls.h?h=v5.10 | sed \u0026#34;s/#include/\\\\\\\\\\\\\\\\#include/g\u0026#34; \u0026gt;\u0026gt; syscalls.h   1  wget -O- https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/include/linux/build_bug.h?h=v5.10 | sed \u0026#34;s/#include/\\\\\\\\\\\\\\\\#include/g\u0026#34; \u0026gt;\u0026gt; build_bug.h   1 2 3 4 5 6 7 8  #include \u0026#34;syscalls.h\u0026#34;#include \u0026#34;syscall_wrapper.h\u0026#34; SYSCALL_DEFINE4(ptrace, long, request, long, pid, unsigned long, addr, unsigned long, data) { Tunghai University }   我們資料夾下面有syscall_wrapper.h,syscalls.h,build_bug.h,main.c4個檔案\n觀看macro如何展開-DCONFIG_X86_64代表#ifdef CONFIG_X86_64這個區塊的文字可以展開\ngcc -E main.c -DCONFIG_X86_64 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  static long __se_sys_ptrace(__typeof(__builtin_choose_expr((__same_type((__force long)0, 0LL) || __same_type((__force long)0, 0ULL)), 0LL, 0L)) request, __typeof(__builtin_choose_expr((__same_type((__force long)0, 0LL) || __same_type((__force long)0, 0ULL)), 0LL, 0L)) pid, __typeof(__builtin_choose_expr((__same_type((__force unsigned long)0, 0LL) || __same_type((__force unsigned long)0, 0ULL)), 0LL, 0L)) addr, __typeof(__builtin_choose_expr((__same_type((__force unsigned long)0, 0LL) || __same_type((__force unsigned long)0, 0ULL)), 0LL, 0L)) data); static inline long __do_sys_ptrace(long request, long pid, unsigned long addr, unsigned long data); long __x64_sys_ptrace(const struct pt_regs *regs); ALLOW_ERROR_INJECTION(__x64_sys_ptrace, ERRNO); long __x64_sys_ptrace(const struct pt_regs *regs) { return __se_sys_ptrace(regs-\u0026gt;di, regs-\u0026gt;si, regs-\u0026gt;dx, regs-\u0026gt;r10); } static long __se_sys_ptrace(__typeof(__builtin_choose_expr((__same_type((__force long)0, 0LL) || __same_type((__force long)0, 0ULL)), 0LL, 0L)) request, __typeof(__builtin_choose_expr((__same_type((__force long)0, 0LL) || __same_type((__force long)0, 0ULL)), 0LL, 0L)) pid, __typeof(__builtin_choose_expr((__same_type((__force unsigned long)0, 0LL) || __same_type((__force unsigned long)0, 0ULL)), 0LL, 0L)) addr, __typeof(__builtin_choose_expr((__same_type((__force unsigned long)0, 0LL) || __same_type((__force unsigned long)0, 0ULL)), 0LL, 0L)) data) { long ret = __do_sys_ptrace((__force long) request, (__force long) pid, (__force unsigned long) addr, (__force unsigned long) data); (void)((int)(sizeof(struct { int:(-!!(!(__same_type((__force long)0, 0LL) || __same_type((__force long)0, 0ULL)) \u0026amp;\u0026amp; sizeof(long) \u0026gt; sizeof(long))); }))), (void)((int)(sizeof(struct { int:(-!!(!(__same_type((__force long)0, 0LL) || __same_type((__force long)0, 0ULL)) \u0026amp;\u0026amp; sizeof(long) \u0026gt; sizeof(long))); }))), (void)((int)(sizeof(struct { int:(-!!(!(__same_type((__force unsigned long)0, 0LL) || __same_type((__force unsigned long)0, 0ULL)) \u0026amp;\u0026amp; sizeof(unsigned long) \u0026gt; sizeof(long))); }))), (void)((int)(sizeof(struct { int:(-!!(!(__same_type((__force unsigned long)0, 0LL) || __same_type((__force unsigned long)0, 0ULL)) \u0026amp;\u0026amp; sizeof(unsigned long) \u0026gt; sizeof(long))); }))); asmlinkage_protect(4, ret,request, pid, addr, data); return ret; } static inline long __do_sys_ptrace(long request, long pid, unsigned long addr, unsigned long data) { Tunghai University }   由此可知調用的過程,因為ftrace只有追蹤__x64_sys_ptrace這個函數,所以我們沒有看到看到__se_sys_ptrace-\u0026gt;__do_sys_ptrace這個過程\nSYSCALL_DEFINE4(ptrace, long, request, long, pid, unsigned long, addr, unsigned long, data) 被展開static inline long __do_sys_ptrace(long request, long pid, unsigned long addr, unsigned long data)\n__x64_sys_ptrace-\u0026gt;__se_sys_ptrace-\u0026gt;__do_sys_ptrace 來源 整理與翻譯來源David DrysdaleAnatomy of a system call, part 1\nThe Definitive Guide to Linux System Calls\nWhat are the calling conventions for UNIX \u0026amp; Linux system calls (and user-space functions) on i386 and x86-64\nSystem V Application Binary Interface AMD64 Architecture Processor Supplement\nHow to Add a System Call\nLinux内核源码分析 - 系统调用\nSystem calls in the Linux kernel. Part 2.\n","description":"","id":39,"section":"posts","tags":["assambly","linux"],"title":"system call過程","uri":"/posts/linux/systemcall/"}]